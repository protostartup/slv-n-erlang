ash-4.2# erl
Erlang/OTP 17 [erts-6.2] [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]

Eshell V6.2  (abort with ^G)
1> c(hhfuns)
1> .
{ok,hhfuns}
2> hhfuns:add(one,two).
** exception error: bad function one
     in function  hhfuns:add/2 (hhfuns.erl, line 10)
3> hhfuns:add(fun hhfuns:one/0,hhfuns:two/0).
* 1: illegal expression
4> hhfuns:add(fun hhfuns:one/0,fun hhfuns:two/0).

this is what fun Module:Function/Arity is:
it tells the VM to use that specific function, and then bind it to a variable.
ref:
http://learnyousomeerlang.com/higher-order-functions#get-functional


bash-4.2# erl
Erlang/OTP 17 [erts-6.2] [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]

Eshell V6.2  (abort with ^G)
1> c(hhfuns).
{ok,hhfuns}
2> hhfuns:m
map/2          module_info/0  module_info/1  
2> L = [1,2,3,4,5,6]. 
[1,2,3,4,5,6]
3> hhfuns:
add/2          decr/1         decrement/1    incr/1         increment/1    
map/2          module_info/0  module_info/1  one/0          two/0          

3> hhfuns:incr
incr/1       increment/1  
3> hhfuns:increment(L).
[2,3,4,5,6,7]
4> hhfuns:decrement(L).
[0,1,2,3,4,5]
5> hhfuns:map(fun hhfuns:).
add/2          decr/1         decrement/1    incr/1         increment/1    
map/2          module_info/0  module_info/1  one/0          two/0          

5> hhfuns:map(fun hhfuns:incr/1,L).
[2,3,4,5,6,7]
6> hhfuns:map(fun hhfuns:decr/1,L).
[0,1,2,3,4,5]

Here the resuts are the same, but you have just created a very smary abstraction! Every time you will want to apply a function to each element of a list, you only have to call map/2 with your function as a parameter. However, it is a bit annoying to have to put every function we want to pass a parameter to map/2 in a module, name it, export it, then compile it, etc. In fact it's plainly unpractical. What we need are functions can be decraled on the fly....

Anonymous functions. --> next file.