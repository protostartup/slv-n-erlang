{beam_file,solution2,
    [{main,0,32},
     {module_info,0,78},
     {module_info,1,80},
     {num_digits_1_test,0,6},
     {num_digits_2_test,0,8},
     {num_digits_3_test,0,10},
     {num_digits_4_test,0,14},
     {num_digits_5_test,0,12},
     {num_digits_test,0,4},
     {p,3,47},
     {p_15_test,0,22},
     {p_5_100_test,0,24},
     {p_superd_5_3K_test,0,26},
     {p_superd_test,0,30},
     {p_test,0,16},
     {solo_digit_2_test,0,20},
     {solo_digit_test,0,18},
     {super_digit_test,0,2},
     {test,0,76},
     {times_test,0,28}],
    [{vsn,[333729789772215817921291936420343164560]}],
    [{options,[]},
     {version,"5.0.2"},
     {time,{2016,2,28,3,32,34}},
     {source,
         "/home/rosemary/programming.language.practice/erlang/recursion/super_digit/solution2.erl"}],
    [{function,super_digit_test,0,2,
         [{label,1},
          {line,1},
          {func_info,{atom,solution2},{atom,super_digit_test},0},
          {label,2},
          {allocate,0,0},
          {make_fun2,{solution2,'-super_digit_test/0-fun-0-',1},0,131633192,0},
          {move,{x,0},{x,1}},
          {move,{integer,2},{x,0}},
          {line,2},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,num_digits_test,0,4,
         [{line,3},
          {label,3},
          {func_info,{atom,solution2},{atom,num_digits_test},0},
          {label,4},
          {allocate,0,0},
          {make_fun2,{solution2,'-num_digits_test/0-fun-0-',1},1,131633192,0},
          {move,{x,0},{x,1}},
          {move,{integer,1},{x,0}},
          {line,4},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,num_digits_1_test,0,6,
         [{line,5},
          {label,5},
          {func_info,{atom,solution2},{atom,num_digits_1_test},0},
          {label,6},
          {allocate,0,0},
          {make_fun2,
              {solution2,'-num_digits_1_test/0-fun-0-',1},
              2,131633192,0},
          {move,{x,0},{x,1}},
          {move,{integer,3},{x,0}},
          {line,6},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,num_digits_2_test,0,8,
         [{line,7},
          {label,7},
          {func_info,{atom,solution2},{atom,num_digits_2_test},0},
          {label,8},
          {allocate,0,0},
          {make_fun2,
              {solution2,'-num_digits_2_test/0-fun-0-',1},
              3,131633192,0},
          {move,{x,0},{x,1}},
          {move,{integer,15},{x,0}},
          {line,8},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,num_digits_3_test,0,10,
         [{line,9},
          {label,9},
          {func_info,{atom,solution2},{atom,num_digits_3_test},0},
          {label,10},
          {allocate,0,0},
          {make_fun2,
              {solution2,'-num_digits_3_test/0-fun-0-',1},
              4,131633192,0},
          {move,{x,0},{x,1}},
          {move,{integer,240},{x,0}},
          {line,10},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,num_digits_5_test,0,12,
         [{line,11},
          {label,11},
          {func_info,{atom,solution2},{atom,num_digits_5_test},0},
          {label,12},
          {allocate,0,0},
          {make_fun2,
              {solution2,'-num_digits_5_test/0-fun-0-',1},
              5,131633192,0},
          {move,{x,0},{x,1}},
          {move,{integer,100},{x,0}},
          {line,12},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,num_digits_4_test,0,14,
         [{line,13},
          {label,13},
          {func_info,{atom,solution2},{atom,num_digits_4_test},0},
          {label,14},
          {allocate,0,0},
          {make_fun2,
              {solution2,'-num_digits_4_test/0-fun-0-',1},
              6,131633192,0},
          {move,{x,0},{x,1}},
          {move,{integer,15},{x,0}},
          {line,14},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,p_test,0,16,
         [{line,15},
          {label,15},
          {func_info,{atom,solution2},{atom,p_test},0},
          {label,16},
          {allocate,0,0},
          {make_fun2,{solution2,'-p_test/0-fun-0-',1},7,131633192,0},
          {move,{x,0},{x,1}},
          {move,{integer,124124124},{x,0}},
          {line,16},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,solo_digit_test,0,18,
         [{line,17},
          {label,17},
          {func_info,{atom,solution2},{atom,solo_digit_test},0},
          {label,18},
          {allocate,0,0},
          {make_fun2,{solution2,'-solo_digit_test/0-fun-0-',1},8,131633192,0},
          {move,{x,0},{x,1}},
          {move,{atom,true},{x,0}},
          {line,18},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,solo_digit_2_test,0,20,
         [{line,19},
          {label,19},
          {func_info,{atom,solution2},{atom,solo_digit_2_test},0},
          {label,20},
          {allocate,0,0},
          {make_fun2,
              {solution2,'-solo_digit_2_test/0-fun-0-',1},
              9,131633192,0},
          {move,{x,0},{x,1}},
          {move,{atom,false},{x,0}},
          {line,20},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,p_15_test,0,22,
         [{line,21},
          {label,21},
          {func_info,{atom,solution2},{atom,p_15_test},0},
          {label,22},
          {allocate,0,0},
          {make_fun2,{solution2,'-p_15_test/0-fun-0-',1},10,131633192,0},
          {move,{x,0},{x,1}},
          {move,
              {integer,
},
              {x,0}},
          {line,22},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,p_5_100_test,0,24,
         [{line,23},
          {label,23},
          {func_info,{atom,solution2},{atom,p_5_100_test},0},
          {label,24},
          {allocate,0,0},
          {make_fun2,{solution2,'-p_5_100_test/0-fun-0-',1},11,131633192,0},
          {move,{x,0},{x,1}},
          {move,
              {integer,
},
              {x,0}},
          {line,24},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,p_superd_5_3K_test,0,26,
         [{line,25},
          {label,25},
          {func_info,{atom,solution2},{atom,p_superd_5_3K_test},0},
          {label,26},
          {allocate,0,0},
          {make_fun2,
              {solution2,'-p_superd_5_3K_test/0-fun-0-',1},
              12,131633192,0},
          {move,{x,0},{x,1}},
          {move,{integer,9},{x,0}},
          {line,26},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,times_test,0,28,
         [{line,27},
          {label,27},
          {func_info,{atom,solution2},{atom,times_test},0},
          {label,28},
          {allocate,0,0},
          {make_fun2,{solution2,'-times_test/0-fun-0-',1},13,131633192,0},
          {move,{x,0},{x,1}},
          {move,{integer,128000},{x,0}},
          {line,28},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,p_superd_test,0,30,
         [{line,29},
          {label,29},
          {func_info,{atom,solution2},{atom,p_superd_test},0},
          {label,30},
          {allocate,0,0},
          {make_fun2,{solution2,'-p_superd_test/0-fun-0-',1},14,131633192,0},
          {move,{x,0},{x,1}},
          {move,{integer,3},{x,0}},
          {line,30},
          {call_fun,1},
          {deallocate,0},
          return]},
     {function,main,0,32,
         [{line,31},
          {label,31},
          {func_info,{atom,solution2},{atom,main},0},
          {label,32},
          {allocate_zero,2,0},
          {move,{literal,"~d~d"},{x,1}},
          {move,nil,{x,0}},
          {line,32},
          {call_ext,2,{extfunc,io,fread,2}},
          {test,is_tuple,{f,33},[{x,0}]},
          {test,test_arity,{f,33},[{x,0},2]},
          {get_tuple_element,{x,0},0,{x,1}},
          {get_tuple_element,{x,0},1,{x,2}},
          {test,is_eq_exact,{f,33},[{x,1},{atom,ok}]},
          {test,is_nonempty_list,{f,33},[{x,2}]},
          {get_list,{x,2},{x,3},{x,4}},
          {test,is_nonempty_list,{f,33},[{x,4}]},
          {get_list,{x,4},{x,5},{x,6}},
          {test,is_nil,{f,33},[{x,6}]},
          {move,{x,3},{x,0}},
          {move,{x,0},{y,0}},
          {move,{x,5},{y,1}},
          {line,33},
          {call,1,{solution2,num_digits,1}},
          {move,{y,1},{x,1}},
          {move,{x,0},{x,2}},
          {move,{y,0},{x,0}},
          {trim,2,0},
          {line,34},
          {call,3,{solution2,p_superd,3}},
          {test_heap,2,1},
          {put_list,{x,0},nil,{x,1}},
          {move,{literal,"~p~n"},{x,0}},
          {line,34},
          {call_ext,2,{extfunc,io,fwrite,2}},
          {move,{atom,true},{x,0}},
          {deallocate,0},
          return,
          {label,33},
          {line,32},
          {badmatch,{x,0}}]},
     {function,super_digit,1,35,
         [{line,35},
          {label,34},
          {func_info,{atom,solution2},{atom,super_digit},1},
          {label,35},
          {move,{integer,0},{x,2}},
          {move,{integer,0},{x,1}},
          {call_only,3,{solution2,super_digit,3}}]},
     {function,super_digit,3,37,
         [{line,36},
          {label,36},
          {func_info,{atom,solution2},{atom,super_digit},3},
          {label,37},
          {test,is_eq_exact,{f,40},[{x,0},{integer,0}]},
          {allocate_zero,1,3},
          {line,37},
          {gc_bif,'+',{f,0},3,[{x,1},{x,2}],{x,0}},
          {move,{x,0},{y,0}},
          {line,38},
          {call,1,{solution2,solo_digit,1}},
          {test,is_atom,{f,41},[{x,0}]},
          {select_val,
              {x,0},
              {f,41},
              {list,[{atom,false},{f,38},{atom,true},{f,39}]}},
          {label,38},
          {move,{y,0},{x,0}},
          {call_last,1,{solution2,super_digit,1},1},
          {label,39},
          {move,{y,0},{x,0}},
          {deallocate,1},
          return,
          {label,40},
          {allocate,3,3},
          {move,{x,0},{y,0}},
          {move,{x,2},{y,1}},
          {move,{x,1},{y,2}},
          {line,39},
          {call,1,{solution2,div10,1}},
          {move,{x,0},{x,1}},
          {move,{y,0},{x,0}},
          {move,{x,1},{y,0}},
          {line,39},
          {call,1,{solution2,rem10,1}},
          {line,39},
          {gc_bif,'+',{f,0},1,[{y,2},{y,1}],{x,2}},
          {move,{x,0},{x,1}},
          {move,{y,0},{x,0}},
          {call_last,3,{solution2,super_digit,3},3},
          {label,41},
          {line,38},
          {case_end,{x,0}}]},
     {function,p_superd,2,43,
         [{line,40},
          {label,42},
          {func_info,{atom,solution2},{atom,p_superd},2},
          {label,43},
          {allocate,2,2},
          {move,{x,1},{y,0}},
          {move,{x,0},{y,1}},
          {line,40},
          {call,1,{solution2,num_digits,1}},
          {move,{y,0},{x,1}},
          {move,{x,0},{x,2}},
          {move,{y,1},{x,0}},
          {call_last,3,{solution2,p_superd,3},2}]},
     {function,p_superd,3,45,
         [{line,41},
          {label,44},
          {func_info,{atom,solution2},{atom,p_superd},3},
          {label,45},
          {allocate,0,3},
          {line,42},
          {call,3,{solution2,p,3}},
          {call_last,1,{solution2,super_digit,1},0}]},
     {function,p,3,47,
         [{line,43},
          {label,46},
          {func_info,{atom,solution2},{atom,p},3},
          {label,47},
          {line,43},
          {gc_bif,'-',{f,0},3,[{x,1},{integer,1}],{x,1}},
          {move,{x,2},{x,3}},
          {move,{x,0},{x,4}},
          {move,{integer,0},{x,2}},
          {call_only,5,{solution2,p,5}}]},
     {function,p,5,49,
         [{line,44},
          {label,48},
          {func_info,{atom,solution2},{atom,p},5},
          {label,49},
          {test,is_eq_exact,{f,50},[{x,2},{x,1}]},
          {move,{x,4},{x,0}},
          return,
          {label,50},
          {allocate,4,5},
          {move,{x,0},{y,3}},
          {move,{x,1},{y,2}},
          {move,{x,3},{x,1}},
          {move,{x,4},{x,0}},
          {move,{x,2},{y,0}},
          {move,{x,1},{y,1}},
          {line,45},
          {call,2,{solution2,times,2}},
          {line,45},
          {gc_bif,'+',{f,0},1,[{x,0},{y,3}],{x,0}},
          {line,46},
          {gc_bif,'+',{f,0},1,[{y,0},{integer,1}],{x,2}},
          {move,{y,1},{x,3}},
          {move,{y,2},{x,1}},
          {move,{x,0},{x,4}},
          {move,{y,3},{x,0}},
          {call_last,5,{solution2,p,5},4}]},
     {function,rem10,1,52,
         [{line,47},
          {label,51},
          {func_info,{atom,solution2},{atom,rem10},1},
          {label,52},
          {move,{integer,10},{x,1}},
          {call_only,2,{solution2,rem_,2}}]},
     {function,rem_,2,54,
         [{line,48},
          {label,53},
          {func_info,{atom,solution2},{atom,rem_},2},
          {label,54},
          {line,48},
          {gc_bif,'rem',{f,0},2,[{x,0},{x,1}],{x,0}},
          return]},
     {function,div10,1,56,
         [{line,49},
          {label,55},
          {func_info,{atom,solution2},{atom,div10},1},
          {label,56},
          {move,{integer,10},{x,1}},
          {call_only,2,{solution2,div_,2}}]},
     {function,div_,2,58,
         [{line,50},
          {label,57},
          {func_info,{atom,solution2},{atom,div_},2},
          {label,58},
          {test,is_integer,{f,61},[{x,1}]},
          {select_val,
              {x,1},
              {f,61},
              {list,[{integer,1},{f,59},{integer,0},{f,60}]}},
          {label,59},
          {move,{integer,1},{x,0}},
          return,
          {label,60},
          {move,{atom,undefined},{x,0}},
          return,
          {label,61},
          {line,51},
          {fconv,{x,0},{fr,0}},
          {fconv,{x,1},{fr,1}},
          fclearerror,
          {arithfbif,fdiv,{f,0},[{fr,0},{fr,1}],{fr,0}},
          {line,51},
          {test_heap,{alloc,[{words,0},{floats,1}]},2},
          {fcheckerror,{f,0}},
          {fmove,{fr,0},{x,0}},
          {gc_bif,trunc,{f,0},2,[{x,0}],{x,0}},
          return]},
     {function,num_digits,1,63,
         [{line,52},
          {label,62},
          {func_info,{atom,solution2},{atom,num_digits},1},
          {label,63},
          {move,{integer,0},{x,1}},
          {call_only,2,{solution2,num_digits,2}}]},
     {function,num_digits,2,65,
         [{line,53},
          {label,64},
          {func_info,{atom,solution2},{atom,num_digits},2},
          {label,65},
          {test,is_eq_exact,{f,66},[{x,0},{integer,0}]},
          {move,{x,1},{x,0}},
          return,
          {label,66},
          {allocate,1,2},
          {move,{x,1},{y,0}},
          {line,54},
          {call,1,{solution2,div10,1}},
          {line,54},
          {gc_bif,'+',{f,0},1,[{y,0},{integer,1}],{x,1}},
          {call_last,2,{solution2,num_digits,2},1}]},
     {function,times,2,68,
         [{line,55},
          {label,67},
          {func_info,{atom,solution2},{atom,times},2},
          {label,68},
          {move,{x,0},{x,2}},
          {move,{x,1},{x,0}},
          {move,{integer,0},{x,1}},
          {call_only,3,{solution2,times,3}}]},
     {function,times,3,70,
         [{line,56},
          {label,69},
          {func_info,{atom,solution2},{atom,times},3},
          {label,70},
          {test,is_eq_exact,{f,71},[{x,1},{x,0}]},
          {move,{x,2},{x,0}},
          return,
          {label,71},
          {line,57},
          {gc_bif,'+',{f,0},3,[{x,1},{integer,1}],{x,1}},
          {line,57},
          {gc_bif,'*',{f,0},3,[{x,2},{integer,10}],{x,2}},
          {call_only,3,{solution2,times,3}}]},
     {function,solo_digit,1,73,
         [{line,58},
          {label,72},
          {func_info,{atom,solution2},{atom,solo_digit},1},
          {label,73},
          {test,is_ge,{f,74},[{x,0},{integer,0}]},
          {test,is_ge,{f,74},[{integer,9},{x,0}]},
          {move,{atom,true},{x,0}},
          return,
          {label,74},
          {move,{atom,false},{x,0}},
          return]},
     {function,test,0,76,
         [{line,0},
          {label,75},
          {func_info,{atom,solution2},{atom,test},0},
          {label,76},
          {move,{atom,solution2},{x,0}},
          {line,0},
          {call_ext_only,1,{extfunc,eunit,test,1}}]},
     {function,module_info,0,78,
         [{line,0},
          {label,77},
          {func_info,{atom,solution2},{atom,module_info},0},
          {label,78},
          {move,{atom,solution2},{x,0}},
          {line,0},
          {call_ext_only,1,{extfunc,erlang,get_module_info,1}}]},
     {function,module_info,1,80,
         [{line,0},
          {label,79},
          {func_info,{atom,solution2},{atom,module_info},1},
          {label,80},
          {move,{x,0},{x,1}},
          {move,{atom,solution2},{x,0}},
          {line,0},
          {call_ext_only,2,{extfunc,erlang,get_module_info,2}}]},
     {function,'-p_superd_test/0-fun-0-',1,82,
         [{line,30},
          {label,81},
          {func_info,{atom,solution2},{atom,'-p_superd_test/0-fun-0-'},1},
          {label,82},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,{integer,3},{x,1}},
          {move,{integer,148},{x,0}},
          {line,30},
          {call,2,{solution2,p_superd,2}},
          {test,is_eq_exact,{f,83},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,83},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,{literal,{expression,"p_superd ( 148 , 3 )"}},{x,0},{x,0}},
          {put_list,{literal,{line,40}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,30},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-times_test/0-fun-0-',1,85,
         [{line,28},
          {label,84},
          {func_info,{atom,solution2},{atom,'-times_test/0-fun-0-'},1},
          {label,85},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,{integer,3},{x,1}},
          {move,{integer,128},{x,0}},
          {line,28},
          {call,2,{solution2,times,2}},
          {test,is_eq_exact,{f,86},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,86},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,{literal,{expression,"times ( 128 , 3 )"}},{x,0},{x,0}},
          {put_list,{literal,{line,37}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,28},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-p_superd_5_3K_test/0-fun-0-',1,88,
         [{line,26},
          {label,87},
          {func_info,{atom,solution2},{atom,'-p_superd_5_3K_test/0-fun-0-'},1},
          {label,88},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,{integer,3},{x,1}},
          {move,
              {integer,
                  3546630947312051453014172159647935984478824945973141333062252613718025688716704470547449723886626736},
              {x,0}},
          {line,26},
          {call,2,{solution2,p_superd,2}},
          {test,is_eq_exact,{f,89},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,89},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,
              {literal,
                  {expression,
                      "p_superd ( 3546630947312051453014172159647935984478824945973141333062252613718025688716704470547449723886626736 , 3 )"}},
              {x,0},
              {x,0}},
          {put_list,{literal,{line,33}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,26},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-p_5_100_test/0-fun-0-',1,91,
         [{line,24},
          {label,90},
          {func_info,{atom,solution2},{atom,'-p_5_100_test/0-fun-0-'},1},
          {label,91},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,{integer,100},{x,1}},
          {move,{integer,100},{x,2}},
          {move,
              {integer,
},
              {x,0}},
          {line,24},
          {call,3,{solution2,p,3}},
          {test,is_eq_exact,{f,92},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,92},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,
              {literal,
                  {expression,
                      "p ( 861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788861568688536788 , 100 , 100 )"}},
              {x,0},
              {x,0}},
          {put_list,{literal,{line,30}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,24},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-p_15_test/0-fun-0-',1,94,
         [{line,22},
          {label,93},
          {func_info,{atom,solution2},{atom,'-p_15_test/0-fun-0-'},1},
          {label,94},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,{integer,100},{x,1}},
          {move,{integer,15},{x,2}},
          {move,{integer,861568688536788},{x,0}},
          {line,22},
          {call,3,{solution2,p,3}},
          {test,is_eq_exact,{f,95},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,95},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,
              {literal,{expression,"p ( 861568688536788 , 100 , 15 )"}},
              {x,0},
              {x,0}},
          {put_list,{literal,{line,27}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,22},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-solo_digit_2_test/0-fun-0-',1,97,
         [{line,20},
          {label,96},
          {func_info,{atom,solution2},{atom,'-solo_digit_2_test/0-fun-0-'},1},
          {label,97},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,{integer,15},{x,0}},
          {line,20},
          {call,1,{solution2,solo_digit,1}},
          {test,is_eq_exact,{f,98},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,98},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,{literal,{expression,"solo_digit ( 15 )"}},{x,0},{x,0}},
          {put_list,{literal,{line,25}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,20},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-solo_digit_test/0-fun-0-',1,100,
         [{line,18},
          {label,99},
          {func_info,{atom,solution2},{atom,'-solo_digit_test/0-fun-0-'},1},
          {label,100},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,{integer,5},{x,0}},
          {line,18},
          {call,1,{solution2,solo_digit,1}},
          {test,is_eq_exact,{f,101},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,101},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,{literal,{expression,"solo_digit ( 5 )"}},{x,0},{x,0}},
          {put_list,{literal,{line,23}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,18},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-p_test/0-fun-0-',1,103,
         [{line,16},
          {label,102},
          {func_info,{atom,solution2},{atom,'-p_test/0-fun-0-'},1},
          {label,103},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,{integer,3},{x,1}},
          {move,{integer,3},{x,2}},
          {move,{integer,124},{x,0}},
          {line,16},
          {call,3,{solution2,p,3}},
          {test,is_eq_exact,{f,104},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,104},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,{literal,{expression,"p ( 124 , 3 , 3 )"}},{x,0},{x,0}},
          {put_list,{literal,{line,21}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,16},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-num_digits_4_test/0-fun-0-',1,106,
         [{line,14},
          {label,105},
          {func_info,{atom,solution2},{atom,'-num_digits_4_test/0-fun-0-'},1},
          {label,106},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,{integer,861568688536788},{x,0}},
          {line,14},
          {call,1,{solution2,num_digits,1}},
          {test,is_eq_exact,{f,107},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,107},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,
              {literal,{expression,"num_digits ( 861568688536788 )"}},
              {x,0},
              {x,0}},
          {put_list,{literal,{line,18}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,14},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-num_digits_5_test/0-fun-0-',1,109,
         [{line,12},
          {label,108},
          {func_info,{atom,solution2},{atom,'-num_digits_5_test/0-fun-0-'},1},
          {label,109},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,
              {integer,
                  3546630947312051453014172159647935984478824945973141333062252613718025688716704470547449723886626736},
              {x,0}},
          {line,12},
          {call,1,{solution2,num_digits,1}},
          {test,is_eq_exact,{f,110},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,110},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,
              {literal,
                  {expression,
                      "num_digits ( 3546630947312051453014172159647935984478824945973141333062252613718025688716704470547449723886626736 )"}},
              {x,0},
              {x,0}},
          {put_list,{literal,{line,16}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,12},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-num_digits_3_test/0-fun-0-',1,112,
         [{line,10},
          {label,111},
          {func_info,{atom,solution2},{atom,'-num_digits_3_test/0-fun-0-'},1},
          {label,112},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,
              {integer,
                  129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129},
              {x,0}},
          {line,10},
          {call,1,{solution2,num_digits,1}},
          {test,is_eq_exact,{f,113},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,113},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,
              {literal,
                  {expression,
                      "num_digits ( 129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129129 )"}},
              {x,0},
              {x,0}},
          {put_list,{literal,{line,14}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,10},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-num_digits_2_test/0-fun-0-',1,115,
         [{line,8},
          {label,114},
          {func_info,{atom,solution2},{atom,'-num_digits_2_test/0-fun-0-'},1},
          {label,115},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,{integer,129129129129129},{x,0}},
          {line,8},
          {call,1,{solution2,num_digits,1}},
          {test,is_eq_exact,{f,116},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,116},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,
              {literal,{expression,"num_digits ( 129129129129129 )"}},
              {x,0},
              {x,0}},
          {put_list,{literal,{line,12}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,8},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-num_digits_1_test/0-fun-0-',1,118,
         [{line,6},
          {label,117},
          {func_info,{atom,solution2},{atom,'-num_digits_1_test/0-fun-0-'},1},
          {label,118},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,{integer,129},{x,0}},
          {line,6},
          {call,1,{solution2,num_digits,1}},
          {test,is_eq_exact,{f,119},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,119},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,{literal,{expression,"num_digits ( 129 )"}},{x,0},{x,0}},
          {put_list,{literal,{line,10}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,6},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-num_digits_test/0-fun-0-',1,121,
         [{line,4},
          {label,120},
          {func_info,{atom,solution2},{atom,'-num_digits_test/0-fun-0-'},1},
          {label,121},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,{integer,9},{x,0}},
          {line,4},
          {call,1,{solution2,num_digits,1}},
          {test,is_eq_exact,{f,122},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,122},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,{literal,{expression,"num_digits ( 9 )"}},{x,0},{x,0}},
          {put_list,{literal,{line,8}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,4},
          {call_ext,1,{extfunc,erlang,error,1}}]},
     {function,'-super_digit_test/0-fun-0-',1,124,
         [{line,2},
          {label,123},
          {func_info,{atom,solution2},{atom,'-super_digit_test/0-fun-0-'},1},
          {label,124},
          {allocate,1,1},
          {move,{x,0},{y,0}},
          {move,{integer,9875},{x,0}},
          {line,2},
          {call,1,{solution2,super_digit,1}},
          {test,is_eq_exact,{f,125},[{x,0},{y,0}]},
          {move,{atom,ok},{x,0}},
          {deallocate,1},
          return,
          {label,125},
          {test_heap,19,1},
          {put_tuple,2,{x,1}},
          {put,{atom,value}},
          {put,{x,0}},
          {put_list,{x,1},nil,{x,0}},
          {put_tuple,2,{x,1}},
          {put,{atom,expected}},
          {put,{y,0}},
          {put_list,{x,1},{x,0},{x,0}},
          {put_list,{literal,{expression,"super_digit ( 9875 )"}},{x,0},{x,0}},
          {put_list,{literal,{line,6}},{x,0},{x,0}},
          {put_list,{literal,{module,solution2}},{x,0},{x,1}},
          {put_tuple,2,{x,0}},
          {put,{atom,assertEqual_failed}},
          {put,{x,1}},
          {line,2},
          {call_ext,1,{extfunc,erlang,error,1}}]}]}.
