-module(cpdc_tests).
-include_lib("eunit/include/eunit.hrl").
-include("./include/testcase_input02_02.hrl").
-import(cpdc, [cpdc/1]).

%%% How 2 run
%%% eunit:test({inparallel, [countpairs, countpairs_tests]}, [verbose]).

sherlok_pairs_123_test_() ->
    {"Total pairs in '[1,2,3]' is '0'", ?_assertEqual(0, cpdc([1,2,3]))}.

sherlok_pairs_1231_test_() ->
    {"Total pairs in '[1,2,3,1]' is '2'", ?_assertEqual(2, cpdc([1,2,3,1]))}.

sherlok_pairs_12312_test_() ->
    {"Total pairs in '[1,2,3,1,2]' is '4'", ?_assertEqual(4, cpdc([1,2,3,1,2]))}.

sherlok_pairs_123125563_test_() ->
    {"Total pairs in '[1,2,3,1,2,5,5,6,3]' is '8'", ?_assertEqual(8, cpdc([1,2,3,1,2,5,5,6,3]))}.

sherlok_pairs_1231255631_test_() ->
    {"Total pairs in '[1,2,3,1,2,5,5,6,3,1]' is '12'", ?_assertEqual(12, cpdc([1,2,3,1,2,5,5,6,3,1]))}.

sherlok_pairs_671_949_460_546_634_679_496_533_25_173_test_() ->
    {"Total pairs in '[ 671 949 460 546 634 679 496 533 825 173]' is '0'", ?_assertEqual(0, cpdc([671, 949, 460, 546, 634, 679, 496, 533, 825, 173]))}.

sherlok_pairs_thefirst10elems_duplicatedbythe2nd10elems_test_() ->
    {"Total pairs in '[671, 949, 460, 546, 634, 679, 496, 533, 825, 173, 671, 949, 460, 546, 634, 679, 496, 533, 825, 173]' is '20'", ?_assertEqual(20, cpdc([671, 949, 460, 546, 634, 679, 496, 533, 825, 173, 671, 949, 460, 546, 634, 679, 496, 533, 825, 173]))}.

make_list(Times) when Times =< 0 ->
    'Times must be greater than 0';
make_list(Times) ->
    L = [959067, 623243, 855336, 936177, 236266, 80008, 467875, 334289, 912280, 731339, 987367, 87374, 477188, 911967, 843590, 119049, 355945, 73440, 620606, 280287, 892767, 163264, 732741, 564321, 76687, 832664, 418872, 584609, 682121, 66195, 117843, 510497, 34920, 91388, 488104, 133119, 309070, 313191, 48818, 483791, 444430, 652349, 309201, 302424, 392668, 341326, 489251, 448670, 442720, 74272, 418223, 110659, 183923, 142387, 696008, 12482, 535779, 124956, 495134, 76026, 131875, 411249, 712439, 951745, 361557, 882311, 508981, 198626, 103346, 660498, 286698, 883922, 760036, 860274, 222272, 631606, 490014, 904344, 126251, 100625, 983385, 207327, 155255, 548792, 259869, 719705, 196133, 550754, 583388, 174801, 745333, 575940, 781898, 978967, 603790, 547828, 112232, 29083, 625973, 690286, 978596, 129290, 468465, 202560, 487540, 728726, 656651, 159465, 485445, 513827, 564519, 278146, 132001, 322000, 789863, 642111, 150557, 384933, 961975, 301139, 184346, 180237, 322864, 248546, 923799, 641129, 889121, 408779, 556855, 157698, 852907, 166596, 49076, 950996, 225943, 55738, 966948, 754231, 975954, 27797, 791113, 868142, 21740, 235970, 997563, 359279, 731868, 581089, 19840, 631211, 204404, 701380, 764365, 426512, 544206, 411082, 289669, 999742, 180868, 81726, 418602, 233549, 131437, 870057, 308137, 374501, 780604, 393512, 502396, 89374, 400875, 594049, 420570, 621733, 456696, 472084, 563664, 848112, 397158, 107460, 548832, 956262, 330365, 414449, 392848, 906307, 325744, 226606, 175178, 569177, 926059, 380625, 534783, 29958, 399017, 942350, 959075, 388753, 207191, 836931, 559941, 388564, 314011, 486241, 159850, 109756, 160721, 825501, 970196, 20926, 62050, 480843, 341385, 660090, 241216, 89748, 941283, 818390, 307877, 698938, 461687, 194927, 957507, 57942, 222277, 842496, 385996, 522116, 592910, 39540, 990558, 255228, 931654, 209108, 890798, 559544, 641914, 374201, 182316, 679924, 322847, 825588, 230529, 709740, 974064, 111597, 591287, 504286, 655485, 406846, 919031, 218022, 469452, 176137, 789055, 247282, 748693, 150971, 593142, 54960, 46989, 46614, 163154, 71839, 238637, 603735, 681695, 810760, 281441, 119695, 489994, 259053, 836081, 30020, 54164, 732877, 219369, 230854,  480843, 341385, 660090, 241216, 89748, 941283, 818390, 307877, 698938, 461687, 194927, 957507, 57942, 222277, 842496, 385996, 522116, 592910, 39540, 990558, 255228, 931654, 209108, 890798, 559544, 641914, 374201, 182316, 679924, 322847, 825588, 230529, 709740, 974064, 111597, 591287, 504286, 655485, 406846, 919031, 218022, 469452, 176137, 789055, 247282, 748693, 150971, 593142, 54960, 46989, 46614, 163154, 71839, 238637, 603735, 681695, 810760, 281441, 119695, 489994, 259053, 836081, 30020, 54164, 732877, 219369, 230854, 480843, 341385, 660090, 241216, 89748, 941283, 818390, 307877, 698938, 461687, 194927, 957507, 57942, 222277, 842496, 385996, 522116, 592910, 39540, 990558, 255228, 931654, 209108, 890798, 559544, 641914, 374201, 182316, 679924, 322847, 825588, 230529, 709740, 974064, 111597, 591287, 504286, 655485, 406846, 919031, 218022, 469452, 176137, 789055, 247282, 748693, 150971, 593142, 54960, 46989, 46614, 163154, 71839, 238637, 603735, 681695, 810760, 281441, 119695, 489994, 259053, 836081, 30020, 54164, 732877, 219369, 230854, 71839 , 238637 , 603735 , 681695 , 810760 , 281441 , 119695 , 489994 , 259053 , 836081 , 30020 , 54164 , 732877 , 219369 , 230854, 71839 , 238637 , 603735 , 681695 , 810760 , 281441 , 119695 , 489994 , 259053 , 836081 , 30020 , 54164 , 732877 , 219369 , 230854, 71839 , 238637 , 603735 , 681695 , 810760 , 281441 , 119695 , 489994 , 259053 , 836081 , 30020 , 54164 , 732877 , 219369 , 230854, 71839 , 238637 , 603735 , 681695 , 810760 , 281441 , 119695 , 489994 , 259053 , 836081 , 30020 , 54164 , 732877 , 219369 , 230854,71839 , 238637 , 603735 , 681695 , 810760 , 281441 , 119695 , 489994 , 259053 , 836081 , 30020 , 54164 , 732877 , 219369 , 230854,71839 , 238637 , 603735 , 681695 , 810760 , 281441 , 119695 , 489994 , 259053 , 836081 , 30020 , 54164 , 732877],
    make(L, Times, 1, L).

make(_L, B, B, LL) ->
    LL;
make(L, Times, B, LL) ->
    make(L, Times -1, B, lists:append(L,LL)).

sherlok_pairs_for_a_list_of_41500_elements_test_() ->
    L = make_list(83),
    {"A list contains '41500' elements has total pairs of '12772040'", ?_assertEqual(12772040, cpdc(L))}.

sherlok_pairs_for_a_list_of_50000_elements_test_() ->
    L = make_list(100),
    {"A list contains '50000' elements has total pairs of '18550000'", ?_assertEqual(18550000, cpdc(L))}.

sherlok_pairs_for_a_list_of_100000_elements_test_() ->
    L = make_list(200),
    io:fwrite("Length of 'L' by 'make_list(200)':~w~n", [length(L)]),
    {"A list contains '100000' elements has total pairs of '74300000'", ?_assertEqual(74300000, cpdc(L))}.

sherlok_pairs_for_a_list_of_500_elements_test_() ->
    L = make_list(1),
    {"A list contains '500' elements has total pairs of '1360'", ?_assertEqual(1360, cpdc(L))}.

sherlok_pairs_103_test_() ->
    L =  [68652, 79719, 25968, 77845, 49251, 53626, 66623, 94917, 72748, 94903, 
	  21729, 12292, 16926, 25750, 78648, 96310, 29804, 50310, 78882, 89510, 
	  59748, 11306, 92627, 48858, 46105, 25440, 89770, 67209, 71449, 47582, 
	  34448, 85207, 37522, 63518, 59474, 35190, 80896, 66581, 13843, 39212, 
	   1170,  1415, 49934, 67769, 42484, 63090, 67747, 44648, 16123, 53009, 
	  96329,    97,   018, 90306, 82518, 95371, 74678, 62732, 25772, 95198, 
	  14503, 61399, 49677, 19394, 32812,  7672, 33355, 76676, 66498,   985,
	     58, 28791, 97144, 32429, 22143, 42943, 53625, 51431, 83357, 35383,
	  65266, 68692, 93540, 14273, 47466, 34410, 14264,   330,    48,  1391, 
	  69316, 12756, 83031, 31229, 75803, 22324, 50886, 85499, 98174, 32955, 
	  69138, 14949, 99978],

    {"A list contains 103 elements has total pairs of '0'", ?_assertEqual(0, cpdc(L))}.

sherlok_pairs_206_test_() ->
    L =  [68652, 79719, 25968, 77845, 49251, 53626, 66623, 94917, 72748, 94903, 
	  21729, 12292, 16926, 25750, 78648, 96310, 29804, 50310, 78882, 89510, 
	  59748, 11306, 92627, 48858, 46105, 25440, 89770, 67209, 71449, 47582, 
	  34448, 85207, 37522, 63518, 59474, 35190, 80896, 66581, 13843, 39212, 
	   1170,  1415, 49934, 67769, 42484, 63090, 67747, 44648, 16123, 53009, 
	  96329,    97,   018, 90306, 82518, 95371, 74678, 62732, 25772, 95198, 
	  14503, 61399, 49677, 19394, 32812,  7672, 33355, 76676, 66498,   985,
	     58, 28791, 97144, 32429, 22143, 42943, 53625, 51431, 83357, 35383,
	  65266, 68692, 93540, 14273, 47466, 34410, 14264,   330,    48,  1391, 
	  69316, 12756, 83031, 31229, 75803, 22324, 50886, 85499, 98174, 32955, 
	  69138, 14949, 99978,
	  68652, 79719, 25968, 77845, 49251, 53626, 66623, 94917, 72748, 94903, 
	  21729, 12292, 16926, 25750, 78648, 96310, 29804, 50310, 78882, 89510, 
	  59748, 11306, 92627, 48858, 46105, 25440, 89770, 67209, 71449, 47582, 
	  34448, 85207, 37522, 63518, 59474, 35190, 80896, 66581, 13843, 39212, 
	   1170,  1415, 49934, 67769, 42484, 63090, 67747, 44648, 16123, 53009, 
	  96329,    97,   018, 90306, 82518, 95371, 74678, 62732, 25772, 95198, 
	  14503, 61399, 49677, 19394, 32812,  7672, 33355, 76676, 66498,   985,
	     58, 28791, 97144, 32429, 22143, 42943, 53625, 51431, 83357, 35383,
	  65266, 68692, 93540, 14273, 47466, 34410, 14264,   330,    48,  1391, 
	  69316, 12756, 83031, 31229, 75803, 22324, 50886, 85499, 98174, 32955, 
	  69138, 14949, 99978],

    {"A list contains 206 elements has total pairs of '206'", ?_assertEqual(206, cpdc(L))}.

count_pairs_of_1000000s_list_test_() ->


%%% when all are duplications of same element
%%% 145> choose:choose(370,2)*2.
%%% 136530
    {"A list of length '370' having all 1000000-value elements has total pais of '136530'", ?_assertEqual(136530, cpdc(L))}.


count_pairs_testcase01_01_100elms_test_() ->
    {"A list of '100' elemes in 'testcase 01' has total pairs of '0'", ?_assertEqual(0, cpdc([92380,46620,20710,5733,44730,48366,97468,80571,37765,99229,36227,58271,93452,4568,8118,76966,41501,97540,95061,29690,93369,28625,36030,34482,90676,9860,55307,48830,48095,22847,57035,92922,43556,73318,724,53866,98587,63369,60281,47797,81937,10098,5772,1475,65194,51435,6220,32872,30020,40796,68859,26341,64684,51433,36988,60379,86716,9442,87765,98928,18150,26653,75408,54587,53276,94396,92351,60757,76122,72354,24287,66602,58032,51529,10013,97302,28445,77857,2246,73744,69842,97489,47740,49677,42619,88229,24915,12903,75857,59709,38098,52552,79498,9504,58441,70493,46492,22228,70125,16438]))}.

count_pairs_testcase01_02_100elms_test_() ->
    {"A list of '100' elemes in 'testcase 02' has total pairs of '6'", ?_assertEqual(6, cpdc([38083,54539,73417,95500,39530,62601,84931,95747,85645,14614,66144,28805,89773,67638,94429,47469,2,12184,2955,19380,54341,8236,6726,3466,67606,35129,44819,8283,78737,55591,10198,23312,87344,2,17506,90072,48627,73794,61238,66997,32037,31012,7670,97370,13811,69918,22405,8934,33453,88465,73731,35569,35929,3882,13259,8543,52997,18777,79445,70689,27829,73623,2905,974,39508,55764,44879,86709,18607,36841,65819,87982,48900,98491,70164,12925,69787,11306,21802,64444,87744,48523,68140,52960,87132,59471,43325,42063,29321,5625,49300,25662,11900,59356,45551,76349,58661,78612,57200,2]))}.

count_pairs_testcase01_03_100elms_test_() ->
    {"A list of '100' elemes in 'testcase 03' has total pairs of '6'", ?_assertEqual(6, cpdc(
[47256,3349,60380,75322,89413,23206,85274,88210,63921,80525,45631,48143,2423,43377,65985,55543,45885,95995,29151,16467,87191,39300,79568,73851,81096,6888,11706,71156,67373,62010,81777,79293,2,6641,21861,56191,17446,78207,14770,55937,5386,39669,2,47626,72814,18419,40714,19302,19757,15668,25211,52299,67622,88820,51660,11128,1256,52927,41223,21397,67270,2,7673,18005,62505,40085,79108,67588,27685,68851,21994,66343,6043,96659,69180,44600,75580,22091,11341,83899,65085,42591,89225,17722,46229,54082,62755,32173,11973,64820,8582,1962,99337,37733,55940,90614,31327,29905,39812,13774]))}.


count_pairs_testcase01_10_100elms_test_() ->
%%% 143> choose:choose(100,2)*2.
%%% 9900
    {"A list of '100' elemes in 'testcase 10' has total pairs of '9900'", ?_assertEqual(9900, cpdc(
[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]))}.

count_pairs_testcase_02_02_test_() ->
    io:fwrite("Length of testcase_02_02inputlist: ~w~n",  [length(?testcase_input02_02())]),
    {"A list of '100000' elements each is a 10^6 value in 'testcase 02' has total pairs of '9948'",
    ?_assertEqual(9948, cpdc(?testcase_input02_02()))}.
