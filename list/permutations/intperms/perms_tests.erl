-module(perms_tests).
-include_lib("eunit/include/eunit.hrl").

integer_perms_123_test_() ->
    ?_assertEqual(
       [[1,2,3],[1,3,2],[3,1,2],[3,2,1],[2,3,1],[2,1,3]], 
       perms:reverse(perms:permute(123))).

integer_perms_960_test_() ->

    ?_assertEqual([[6,9,0],[6,0,9],[0,6,9],[0,9,6],[9,0,6],[9,6,0]], perms:permute(960)).

permute_lists_of_9_elems_test_() ->
    {
      "Permute a list of 9 elements must pass and yield into 362880 permutations", 
    ?_assertMatch(L when 362880 == length(L), perms:permute(lists:seq(1, 9)))}.

intger_perms_12345_test_() ->
    ?_assertEqual(
       [
	[2,3,4,1,5],[2,3,4,5,1],[2,3,5,4,1],[2,3,5,1,4],[2,3,1,5,4],[2,3,1,4,5],[2,5,3,1,4],[2,5,3,4,1],[2,5,4,3,1],[2,5,4,1,3],[2,5,1,4,3],[2,5,1,3,4],[2,4,1,3,5],[2,4,1,5,3],[2,4,5,1,3],[2,4,5,3,1],[2,4,3,5,1],[2,4,3,1,5],[2,1,3,4,5],[2,1,3,5,4],[2,1,5,3,4],[2,1,5,4,3],[2,1,4,5,3],[2,1,4,3,5],[4,2,3,1,5],[4,2,3,5,1],[4,2,5,3,1],[4,2,5,1,3],[4,2,1,5,3],[4,2,1,3,5],[4,5,2,1,3],[4,5,2,3,1],[4,5,3,2,1],[4,5,3,1,2],[4,5,1,3,2],[4,5,1,2,3],[4,3,1,2,5],[4,3,1,5,2],[4,3,5,1,2],[4,3,5,2,1],[4,3,2,5,1],[4,3,2,1,5],[4,1,2,3,5],[4,1,2,5,3],[4,1,5,2,3],[4,1,5,3,2],[4,1,3,5,2],[4,1,3,2,5],[5,1,3,2,4],[5,1,3,4,2],[5,1,4,3,2],[5,1,4,2,3],[5,1,2,4,3],[5,1,2,3,4],[5,3,2,1,4],[5,3,2,4,1],[5,3,4,2,1],[5,3,4,1,2],[5,3,1,4,2],[5,3,1,2,4],[5,4,1,2,3],[5,4,1,3,2],[5,4,3,1,2],[5,4,3,2,1],[5,4,2,3,1],[5,4,2,1,3],[5,2,1,3,4],[5,2,1,4,3],[5,2,4,1,3],[5,2,4,3,1],[5,2,3,4,1],[5,2,3,1,4],[3,1,4,2,5],[3,1,4,5,2],[3,1,5,4,2],[3,1,5,2,4],[3,1,2,5,4],[3,1,2,4,5],[3,4,2,1,5],[3,4,2,5,1],[3,4,5,2,1],[3,4,5,1,2],[3,4,1,5,2],[3,4,1,2,5],[3,5,1,2,4],[3,5,1,4,2],[3,5,4,1,2],[3,5,4,2,1],[3,5,2,4,1],[3,5,2,1,4],[3,2,1,4,5],[3,2,1,5,4],[3,2,5,1,4],[3,2,5,4,1],[3,2,4,5,1],[3,2,4,1,5],[1,2,4,3,5],[1,2,4,5,3],[1,2,5,4,3],[1,2,5,3,4],[1,2,3,5,4],[1,2,3,4,5],[1,4,3,2,5],[1,4,3,5,2],[1,4,5,3,2],[1,4,5,2,3],[1,4,2,5,3],[1,4,2,3,5],[1,5,2,3,4],[1,5,2,4,3],[1,5,4,2,3],[1,5,4,3,2],[1,5,3,4,2],[1,5,3,2,4],[1,3,2,4,5],[1,3,2,5,4],[1,3,5,2,4],[1,3,5,4,2],[1,3,4,5,2],[1,3,4,2,5]
       ], 
       perms:permute(12345)).

%%% Contracdicting tests to assure that perms:permute does not return duplicate permutation lists.
integer_perms_8516_test_() ->
    Perms = perms:permute(8516),
    NoDupsPerms = perms:rm_duplicates(Perms),
    ?_assertEqual(Perms, NoDupsPerms).

permute_8516_test_() ->
    ?_assertEqual(
       [
	[5,1,8,6],[5,1,6,8],[5,6,1,8],[5,6,8,1],[5,8,6,1],[5,8,1,6],[6,5,8,1],[6,5,1,8],[6,1,5,8],[6,1,8,5],[6,8,1,5],[6,8,5,1],[1,8,5,6],[1,8,6,5],[1,6,8,5],[1,6,5,8],[1,5,6,8],[1,5,8,6],[8,5,1,6],[8,5,6,1],[8,6,5,1],[8,6,1,5],[8,1,6,5],[8,1,5,6]
       ], 
       perms:permute(8516)).

integer_perms_19876_test() ->
    Perms = perms:permute(19876),
    NoDupsPerms = perms:rm_duplicates(Perms),
    ?assertEqual(Perms, NoDupsPerms).

permute_19876_test_() ->
    ?_assertEqual([
		   [9,8,7,1,6],[9,8,7,6,1],[9,8,6,7,1],[9,8,6,1,7],[9,8,1,6,7],[9,8,1,7,6],[9,6,8,1,7],[9,6,8,7,1],[9,6,7,8,1],[9,6,7,1,8],[9,6,1,7,8],[9,6,1,8,7],[9,7,1,8,6],[9,7,1,6,8],[9,7,6,1,8],[9,7,6,8,1],[9,7,8,6,1],[9,7,8,1,6],[9,1,8,7,6],[9,1,8,6,7],[9,1,6,8,7],[9,1,6,7,8],[9,1,7,6,8],[9,1,7,8,6],[7,9,8,1,6],[7,9,8,6,1],[7,9,6,8,1],[7,9,6,1,8],[7,9,1,6,8],[7,9,1,8,6],[7,6,9,1,8],[7,6,9,8,1],[7,6,8,9,1],[7,6,8,1,9],[7,6,1,8,9],[7,6,1,9,8],[7,8,1,9,6],[7,8,1,6,9],[7,8,6,1,9],[7,8,6,9,1],[7,8,9,6,1],[7,8,9,1,6],[7,1,9,8,6],[7,1,9,6,8],[7,1,6,9,8],[7,1,6,8,9],[7,1,8,6,9],[7,1,8,9,6],[6,1,8,9,7],[6,1,8,7,9],[6,1,7,8,9],[6,1,7,9,8],[6,1,9,7,8],[6,1,9,8,7],[6,8,9,1,7],[6,8,9,7,1],[6,8,7,9,1],[6,8,7,1,9],[6,8,1,7,9],[6,8,1,9,7],[6,7,1,9,8],[6,7,1,8,9],[6,7,8,1,9],[6,7,8,9,1],[6,7,9,8,1],[6,7,9,1,8],[6,9,1,8,7],[6,9,1,7,8],[6,9,7,1,8],[6,9,7,8,1],[6,9,8,7,1],[6,9,8,1,7],[8,1,7,9,6],[8,1,7,6,9],[8,1,6,7,9],[8,1,6,9,7],[8,1,9,6,7],[8,1,9,7,6],[8,7,9,1,6],[8,7,9,6,1],[8,7,6,9,1],[8,7,6,1,9],[8,7,1,6,9],[8,7,1,9,6],[8,6,1,9,7],[8,6,1,7,9],[8,6,7,1,9],[8,6,7,9,1],[8,6,9,7,1],[8,6,9,1,7],[8,9,1,7,6],[8,9,1,6,7],[8,9,6,1,7],[8,9,6,7,1],[8,9,7,6,1],[8,9,7,1,6],[1,9,7,8,6],[1,9,7,6,8],[1,9,6,7,8],[1,9,6,8,7],[1,9,8,6,7],[1,9,8,7,6],[1,7,8,9,6],[1,7,8,6,9],[1,7,6,8,9],[1,7,6,9,8],[1,7,9,6,8],[1,7,9,8,6],[1,6,9,8,7],[1,6,9,7,8],[1,6,7,9,8],[1,6,7,8,9],[1,6,8,7,9],[1,6,8,9,7],[1,8,9,7,6],[1,8,9,6,7],[1,8,6,9,7],[1,8,6,7,9],[1,8,7,6,9],[1,8,7,9,6]
		  ], 
		  perms:permute(19876)).
permute_19876_length_test_() ->
    {
      "Permute [1,9,8,7,6] must return 120 permutations",
      ?_assertMatch(L when 120 == length(L), perms:permute([1,9,8,7,6]))
    }.

integer_perms_719036_test_() ->
    Perms = perms:permute(719036),
    NoDupsPerms = perms:rm_duplicates(Perms),
    ?_assertEqual(Perms, NoDupsPerms).

integer_perms_9870651_test_() ->
    Perms = perms:permute(9870651),
    NoDupsPerms = perms:rm_duplicates(Perms),
    ?_assertEqual(Perms, NoDupsPerms).

%% 
perms_for_10000_test() ->
    {
      "permutations of '10000' is '?'", 
      ?assertMatch(L when 5*4*3*2 == length(L),
			  perms:permute(10000))
    }.

perms_1234567_must_return_5040_lenlist_test_() ->
    {"Permutations of 1234567 yields in 5040-list permutations",
    ?_assertMatch(L when 7*6*5*4*3*2 == length(L), perms:permute(1234567))}.


perms_123456789_must_return_362880_lenlist_test_() ->
    {"Permutations of 1234567 yields in 5040-list permutations",
    ?_assertMatch(L when 362880 == length(L), perms:permute(123456789))}.
