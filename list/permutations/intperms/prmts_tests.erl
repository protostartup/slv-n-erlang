-module(prmts_tests).
-include_lib("eunit/include/eunit.hrl").

intger_perms_12345_test_() ->
    ?_assertEqual([
		   [5,1,4,3,2],[5,1,4,2,3],[5,1,3,4,2],[5,1,3,2,4],
		   [5,1,2,4,3],[5,1,2,3,4],[5,2,4,3,1],[5,2,4,1,3],
		   [5,2,3,4,1],[5,2,3,1,4],[5,2,1,4,3],[5,2,1,3,4],
		   [5,3,4,2,1],[5,3,4,1,2],[5,3,2,4,1],[5,3,2,1,4],
		   [5,3,1,4,2],[5,3,1,2,4],[5,4,3,2,1],[5,4,3,1,2],
		   [5,4,2,3,1],[5,4,2,1,3],[5,4,1,3,2],[5,4,1,2,3],
		   
		   [4,1,5,3,2],[4,1,5,2,3],[4,1,3,5,2],[4,1,3,2,5],
		   [4,1,2,5,3],[4,1,2,3,5],[4,2,5,3,1],[4,2,5,1,3],
		   [4,2,3,5,1],[4,2,3,1,5],[4,2,1,5,3],[4,2,1,3,5],
		   [4,3,5,2,1],[4,3,5,1,2],[4,3,2,5,1],[4,3,2,1,5],
		   [4,3,1,5,2],[4,3,1,2,5],[4,5,3,2,1],[4,5,3,1,2],
		   [4,5,2,3,1],[4,5,2,1,3],[4,5,1,3,2],[4,5,1,2,3],
		   
		   [3,1,5,4,2],[3,1,5,2,4],[3,1,4,5,2],[3,1,4,2,5],
		   [3,1,2,5,4],[3,1,2,4,5],[3,2,5,4,1],[3,2,5,1,4],
		   [3,2,4,5,1],[3,2,4,1,5],[3,2,1,5,4],[3,2,1,4,5],
		   [3,4,5,2,1],[3,4,5,1,2],[3,4,2,5,1],[3,4,2,1,5],
		   [3,4,1,5,2],[3,4,1,2,5],[3,5,4,2,1],[3,5,4,1,2],
		   [3,5,2,4,1],[3,5,2,1,4],[3,5,1,4,2],[3,5,1,2,4],
		   
		   [2,1,5,4,3],[2,1,5,3,4],[2,1,4,5,3],[2,1,4,3,5],
		   [2,1,3,5,4],[2,1,3,4,5],[2,3,5,4,1],[2,3,5,1,4],
		   [2,3,4,5,1],[2,3,4,1,5],[2,3,1,5,4],[2,3,1,4,5],
		   [2,4,5,3,1],[2,4,5,1,3],[2,4,3,5,1],[2,4,3,1,5],
		   [2,4,1,5,3],[2,4,1,3,5],[2,5,4,3,1],[2,5,4,1,3],
		   [2,5,3,4,1],[2,5,3,1,4],[2,5,1,4,3],[2,5,1,3,4],

		   [1,2,5,4,3],[1,2,5,3,4],[1,2,4,5,3],[1,2,4,3,5],
		   [1,2,3,5,4],[1,2,3,4,5],[1,3,5,4,2],[1,3,5,2,4],
		   [1,3,4,5,2],[1,3,4,2,5],[1,3,2,5,4],[1,3,2,4,5],
		   [1,4,5,3,2],[1,4,5,2,3],[1,4,3,5,2],[1,4,3,2,5],
		   [1,4,2,5,3],[1,4,2,3,5],[1,5,4,3,2],[1,5,4,2,3],
		   [1,5,3,4,2],[1,5,3,2,4],[1,5,2,4,3],[1,5,2,3,4]
		  ], 
		  prmts:intperms(12345)).


integer_perms_123_test() ->
    ?assertEqual([[1,2,3],
                  [1,3,2],
                  [2,1,3],
		  [2,3,1],
		  [3,1,2],
		  [3,2,1]], prmts:reverse(prmts:intperms(123))).

integer_perms_960_test() ->
    ?assertEqual([[0,6,9],
		  [0,9,6],
		  [6,0,9],
		  [6,9,0],
		  [9,0,6],
		  [9,6,0]], prmts:intperms(960)).

%%% Contracdicting tests to assure that prmts:intperms does not return duplicate permutation lists.
integer_perms_8516_test() ->
    Perms = prmts:intperms(8516),
    NoDupsPerms = prmts:rm_duplicates(Perms),
    ?assertEqual(Perms, NoDupsPerms).

intperms_8516_test() ->
    ?assertEqual([[6,8,5,1],
		  [6,8,1,5],
		  [6,5,8,1],
		  [6,5,1,8],
		  [6,1,8,5],
		  [6,1,5,8],
		  [1,8,5,6],
		  [1,8,6,5],
		  [1,5,8,6],
		  [1,5,6,8],
		  [1,6,8,5],
		  [1,6,5,8],
		  [5,8,1,6],
		  [5,8,6,1],
		  [5,1,8,6],
		  [5,1,6,8],
		  [5,6,8,1],
		  [5,6,1,8],
		  [8,5,1,6],
		  [8,5,6,1],
		  [8,1,5,6],
		  [8,1,6,5],
		  [8,6,5,1],
		  [8,6,1,5]], prmts:intperms(8516)).

integer_perms_19876_test() ->
    Perms = prmts:intperms(19876),
    NoDupsPerms = prmts:rm_duplicates(Perms),
    ?assertEqual(Perms, NoDupsPerms).

intperms_19876_test() ->
    ?assertEqual([[6,1,7,8,9],
		  [6,1,7,9,8],
		  [6,1,8,7,9],
		  [6,1,8,9,7],
		  [6,1,9,7,8],
		  [6,1,9,8,7],
		  [6,9,7,8,1],
		  [6,9,7,1,8],
		  [6,9,8,7,1],
		  [6,9,8,1,7],
		  [6,9,1,7,8],
		  [6,9,1,8,7],
		  [6,8,7,9,1],
		  [6,8,7,1,9],
		  [6,8,9,7,1],
		  [6,8,9,1,7],
		  [6,8,1,7,9],
		  [6,8,1,9,7],
		  [6,7,8,9,1],
		  [6,7,8,1,9],
		  [6,7,9,8,1],
		  [6,7,9,1,8],
		  [6,7,1,8,9],
		  [6,7,1,9,8],
		  [7,1,6,8,9],
		  [7,1,6,9,8],
		  [7,1,8,6,9],
		  [7,1,8,9,6],
		  [7,1,9,6,8],
		  [7,1,9,8,6],
		  [7,9,6,8,1],
		  [7,9,6,1,8],[7,9,8,6,1],[7,9,8,1,6],[7,9,1,6,8],[7,9,1,8,6],[7,8,6,9,1],[7,8,6,1,9],[7,8,9,6,1],
		  [7,8,9,1,6],[7,8,1,6,9],[7,8,1,9,6],[7,6,8,9,1],[7,6,8,1,9],[7,6,9,8,1],[7,6,9,1,8],[7,6,1,8,9],
		  [7,6,1,9,8],[8,1,6,7,9],[8,1,6,9,7],[8,1,7,6,9],[8,1,7,9,6],[8,1,9,6,7],[8,1,9,7,6],[8,9,6,7,1],
		  [8,9,6,1,7],[8,9,7,6,1],[8,9,7,1,6],[8,9,1,6,7],[8,9,1,7,6],[8,7,6,9,1],[8,7,6,1,9],[8,7,9,6,1],
		  [8,7,9,1,6],[8,7,1,6,9],[8,7,1,9,6],[8,6,7,9,1],[8,6,7,1,9],[8,6,9,7,1],[8,6,9,1,7],[8,6,1,7,9],
		  [8,6,1,9,7],[9,1,6,7,8],[9,1,6,8,7],[9,1,7,6,8],[9,1,7,8,6],[9,1,8,6,7],[9,1,8,7,6],[9,8,6,7,1],
		  [9,8,6,1,7],[9,8,7,6,1],[9,8,7,1,6],[9,8,1,6,7],[9,8,1,7,6],[9,7,6,8,1],[9,7,6,1,8],[9,7,8,6,1],
		  [9,7,8,1,6],[9,7,1,6,8],[9,7,1,8,6],[9,6,7,8,1],[9,6,7,1,8],[9,6,8,7,1],[9,6,8,1,7],[9,6,1,7,8],
		  [9,6,1,8,7],[1,9,6,7,8],[1,9,6,8,7],[1,9,7,6,8],[1,9,7,8,6],[1,9,8,6,7],[1,9,8,7,6],[1,8,6,7,9],
		  [1,8,6,9,7],[1,8,7,6,9],[1,8,7,9,6],[1,8,9,6,7],[1,8,9,7,6],[1,7,6,8,9],[1,7,6,9,8],[1,7,8,6,9],
		  [1,7,8,9,6],[1,7,9,6,8],[1,7,9,8,6],[1,6,7,8,9],[1,6,7,9,8],[1,6,8,7,9],[1,6,8,9,7],[1,6,9,7,8],
		  [1,6,9,8,7]], prmts:intperms(19876)).

integer_perms_719036_test_() ->
    Perms = prmts:intperms(719036),
    NoDupsPerms = prmts:rm_duplicates(Perms),
    ?_assertEqual(Perms, NoDupsPerms).

integer_perms_9870651_test_() ->
    Perms = prmts:intperms(9870651),
    NoDupsPerms = prmts:rm_duplicates(Perms),
    ?_assertEqual(Perms, NoDupsPerms).


%% 
perms_for_10000_test() ->
    {"permutations of '10000' is '?'", 
     ?assertEqual(
	[[1,0,0],[1,0,1],[1,1,0],[1,1,1],[0,0,0],[0,0,1],[0,1,0],[0,1,1]], 
     prmts:intperms(10000))}.

perms_1234567_must_return_5040_lenlist_test_() ->
    {"Permutations of 1234567 yields in 5040-list permutations",
    ?_assertEqual(7*6*5*4*3*2, prmts:intperms(1234567))}.
